/******/ (() => { // webpackBootstrap
var __webpack_exports__ = {};
/*!***********************************************************!*\
  !*** ./resources/assets/backend/js/pages/weblink-type.js ***!
  \***********************************************************/
function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

var WeblinkType = function () {
  var moduleUrl = appUrl + '/admin/weblink-types';
  var parentTypeId = $('[name="id"]').val();

  var initParentDatatable = function initParentDatatable() {
    datatable = $('#table-main-weblink-type').DataTable({
      rowReorder: {
        update: false
      },
      bSort: false,
      ajax: {
        url: moduleUrl,
        data: function data(d) {
          return $.extend(d, searchData);
        },
        method: 'GET'
      },
      columns: [{
        data: 'DT_RowIndex',
        sClass: 'text-center'
      }, {
        data: 'title'
      }, {
        data: 'example_image',
        sClass: 'text-center',
        render: function render(data, type, row) {
          return "<a href=\"javascript:;\" data-module-url=\"".concat(moduleUrl, "/").concat(row.id, "\" class=\"btn-view\"><img src=\"").concat(data, "\" style=\"width: 132px; \" /></a>");
        }
      }, {
        data: 'types.length',
        sClass: 'text-center',
        render: function render(data, type, row) {
          return data;
        }
      }, {
        data: 'id',
        sClass: 'text-center',
        render: function render(data, type, row) {
          var baseUrl = "".concat(moduleUrl, "/").concat(data, "/table");
          var btnEdit = "<a href=\"".concat(baseUrl, "\" class=\"btn btn-icon tooltips btn-edit\" data-title=\"\u0E41\u0E01\u0E49\u0E44\u0E02\"><i class=\"fa fa-edit\"></i></a>");
          var actions = btnEdit;
          return actions;
        }
      }],
      columnDefs: [].concat($.fn.dataTable.defaults.columnDefs)
    }).on('draw', function () {
      app_plugins.switch_button();
      $('.tooltips').tooltip();
    });
  };

  var initDatatable = function initDatatable() {
    datatable = $('#table-weblink-type').DataTable({
      rowReorder: {
        update: false
      },
      bSort: false,
      ajax: {
        url: "".concat(moduleUrl, "/").concat(parentTypeId, "/table"),
        data: function data(d) {
          return $.extend(d, searchData);
        },
        method: 'GET'
      },
      columns: [{
        data: 'id',
        sClass: "dragable",
        render: function render(data, type, row) {
          return '';
        }
      }, {
        data: 'DT_RowIndex',
        sClass: 'text-center'
      }, {
        data: 'title'
      }, {
        data: 'published',
        sClass: 'text-center',
        render: function render(data, type, row) {
          var checked = data ? 'checked' : '';
          return "<label class=\"switch\"><input type=\"checkbox\" name=\"status\" data-module-url=\"".concat(moduleUrl, "\" data-id=\"").concat(row.id, "\" ").concat(checked, " /></label>");
        }
      }, {
        data: 'id',
        sClass: 'text-center',
        render: function render(data, type, row) {
          var baseUrl = "".concat(moduleUrl, "/").concat(parentTypeId, "/").concat(data);
          var attrName = ' data-name="' + name + '"';
          var attrActionUrl = ' data-action-url="' + baseUrl + '"';
          var btnView = "<a href=\"javascript:;\" data-module-url=\"".concat(baseUrl, "\" class=\"btn btn-icon tooltips btn-view\" data-title=\"\u0E14\u0E39\u0E02\u0E49\u0E2D\u0E21\u0E39\u0E25\"><i class=\"fa fa-search\"></i></a>");
          var btnEdit = "<a href=\"".concat(baseUrl, "/edit\" class=\"btn btn-icon tooltips btn-edit\" data-title=\"\u0E41\u0E01\u0E49\u0E44\u0E02\"><i class=\"fa fa-edit\"></i></a>");
          var btnDel = "<a href=\"javascript:;\" ".concat(attrName, " ").concat(attrActionUrl, " class=\"btn btn-icon btn-delete tooltips\" data-title=\"\u0E25\u0E1A\"><i class=\"fa fa-trash\"></i></a>");
          var actions = btnEdit + btnDel;
          return actions;
        }
      }],
      columnDefs: [].concat($.fn.dataTable.defaults.columnDefs)
    }).on('draw', function () {
      app_plugins.switch_button();
      $('.tooltips').tooltip();
    });
    datatable.on('row-reorder', function (e, diff, edit) {
      var arr = [];

      for (var i = 0, ien = diff.length; i < ien; i++) {
        var rowData = datatable.row(diff[i].node).data();
        arr.push({
          id: rowData.id,
          position: diff[i].newPosition
        });
      }

      if (arr.length) {
        Loading.show();
        $.ajax({
          url: "".concat(moduleUrl, "/").concat(parentTypeId, "/sequence"),
          type: 'POST',
          data: JSON.stringify(arr),
          dataType: 'json',
          success: function success(resp) {
            App.showSuccess(resp);
            datatable.draw();
            Loading.hide();
          },
          error: function error(resp) {
            Loading.hide();
          }
        });
      }
    });
  };
  /**
   * Form Section
   */


  var handleSubmit = function handleSubmit() {
    var $form = $('#form-weblink-type');
    var submitMethod = $form.find('[name="_method"]').val() || 'POST';
    var redirectUrl = $form.attr('redirect-url');
    var $inputs = $form.find("input, select, button, textarea");
    $form.ajaxForm({
      beforeSubmit: function beforeSubmit(arr, $form, options) {
        $inputs.prop("disabled", true);
      },
      success: function success(resp) {
        if (submitMethod == 'PUT') {
          App.showSuccess(resp);
          setTimeout(function () {
            $inputs.prop("disabled", false); // if (redirectUrl)
            //     window.location.href = redirectUrl;
          }, 500);
        } else {
          App.showSuccess(resp);
          var pathArray = location.pathname.split('/');

          if (redirectUrl) {
            if (redirectUrl.indexOf('{id}') != -1) redirectUrl = redirectUrl.replace('{id}', resp.id);
            setTimeout(function () {
              window.location.href = redirectUrl || pathArray[1] || '';
            }, 500);
          }
        }
      }
    });
  };

  var handlePreview = function handlePreview() {
    $('[name="icon"]').on('change', function (e) {
      var _e$target$files = _slicedToArray(e.target.files, 1),
          file = _e$target$files[0];

      if (file) {
        // console.log(file)
        $(this).parents('.form-group').find('.preview-image').attr('src', URL.createObjectURL(file));
        $(this).parents('.form-group').find('.preview-image').show();
      }
    });
    $('[name="icon_active"]').on('change', function (e) {
      var _e$target$files2 = _slicedToArray(e.target.files, 1),
          file = _e$target$files2[0];

      if (file) {
        // console.log(file)
        $(this).parents('.form-group').find('.preview-image').attr('src', URL.createObjectURL(file));
        $(this).parents('.form-group').find('.preview-image').show();
      }
    });
  };

  return {
    init: function init() {
      if ($('#table-main-weblink-type').length) {
        initParentDatatable();
      }

      if ($('#table-weblink-type').length) {
        initDatatable();
      }

      if ($('#form-weblink-type').length) {
        customSubmit = true;
        handleSubmit();
        handlePreview();
      }
    }
  };
}();

$(function () {
  WeblinkType.init();
});
/******/ })()
;