// require('./bootstrap');

const serverTime = $('meta[name="server-time"]').attr('content');
const appUrl = $('meta[name="site-url"]').attr('content');
const token = $('meta[name="csrf-token"]').attr('content');
const pluck = key => array => Array.from(new Set(array.map(obj => obj[key])));
const getID = pluck('id');
const getChemicalID = pluck('chemical_id');

var dropzone = false;
var customSubmit = false;
var translateApp;
var datatable;
var searchData = {};
var moduleUrl;

var App = function () {
    var debug = true;
    var autonumericFields = [];
    var handleDeleteButton = function () {
        $('body').on('click', 'a.btn-delete', function (e) {
            e.preventDefault();
            var id = $(this).attr('data-id');
            var name = $(this).attr('data-name');
            var actionUrl = $(this).attr('data-action-url');
            var redirectUrl = $(this).attr('data-redirect-url');
            var table = $(this).parents('table');

            var deleteAction = function () {
                $.ajax({
                    url: actionUrl,
                    type: 'POST',
                    data: { _method: 'delete', _token: token },
                    success: function (resp) {
                        if ($.fn.DataTable.isDataTable(table)) {
                            $('.dataTables_processing', table.closest('.dataTables_wrapper')).show();
                            setTimeout(function () {
                                table.dataTable();
                                table.api().ajax.reload();
                                $('.dataTables_processing', table.closest('.dataTables_wrapper')).hide();
                                setTimeout(function () {
                                    App.showSuccess(resp);
                                    if ($('.calendar').length)
                                        window.location.reload();

                                }, 300);
                            }, 100);
                        } else {
                            if (redirectUrl) {
                                window.open(redirectUrl, '_self');
                            } else {
                                window.location.reload();
                            }
                        }
                    },
                    error: function (resp) {

                        var result = resp.responseJSON;

                        if (resp.status == 422) {
                            App.showDeleteDependency(result);
                        } else {
                            if (result.message == 'This action is unauthorized.') {
                                App.show403();
                            } else {
                                App.alert(result.message);
                            }
                        }

                    }
                });
            }

            App.confirm('ต้องการลบ <b>' + name + '</b> ใช่หรือไม่?', deleteAction)
        });
    };

    var handleDeleteImage = function () {
        $('body').on('click', '.btn-delete-image', function (e) {
            const id = $(e.target).data('id');
            $(e.target).prop('disabled', true);
            $(e.target).append(' <i class="fa fa-spinner fa-spin"></i>');

            $.ajax({
                url: `${appUrl}/api/backend/medias/${id}`,
                type: 'delete',
                success: function (resp) {
                    $(e.target).prop('disabled', false);
                    const text = $(e.target).text();
                    $(e.target).text(text.replace(' <i class="fa fa-spinner fa-spin"></i>', ''));
                    window.location.reload();
                },
                error: function () {
                    alert('Error occured, please contact administrator');
                }
            });

        })
    }

    var handleTabs = function () {
        //activate tab if tab id provided in the URL
        if (encodeURI(location.hash)) {
            var tabid = encodeURI(location.hash.substr(1));
            if ($('a[href="#' + tabid + '"]').length) {
                $('a[href="#' + tabid + '"]').parents('.tab-pane:hidden').each(function () {
                    var tabid = $(this).attr("id");
                    $('a[href="#' + tabid + '"]').click();
                });
                $('a[href="#' + tabid + '"]').click();
            } else {
                var li = $('ul.nav.nav-tabs').find('li')[0];
                if (li) {
                    $(li).addClass('active');
                }

                var firstTab = $('.tab-content > .tab-pane').first();
                if (firstTab.length) {
                    firstTab.addClass('active in');
                }
            }
        }

        if ($().tabdrop) {
            $('.tabbable-tabdrop .nav-pills, .tabbable-tabdrop .nav-tabs').tabdrop({
                text: '<i class="fa fa-ellipsis-v"></i>&nbsp;<i class="fa fa-angle-down"></i>'
            });
        }

        $('body').on('click', 'a[data-toggle="tab"]', function () {
            if ($(this).data('hash') != false)
                window.location.hash = $(this).attr('href');

            setTimeout(function () {
                $(window).resize();
            }, 100);
        });
    };

    var handleSelectTwo = function () {
        if (jQuery.fn.select2) {
            $('.select2').select2({
                placeholder: $(this).attr('placeholder') || 'Search..',
                // theme: "bootstrap",
                allowClear: false,
                selectOnClose: true
            });
        }
    };

    var handleBootstrapSelect = function () {
        $('.bs-select').selectpicker({
            iconBase: 'fa',
            tickIcon: 'fa-check',
            placeholder: $(this).attr('placeholder')
        });
    }

    var handleAutoNumeric = function () {
        if (typeof AutoNumeric !== undefined) {
            $('.autonumeric-integer').each(function () {
                var autonumeric = new AutoNumeric(this, {
                    minimumValue: 0,
                    maximumValue: 999999999,
                    decimalPlaces: 0,
                    allowDecimalPadding: false,
                    modifyValueOnWheel: false,
                    unformatOnSubmit: true,
                });
                autonumericFields.push(autonumeric);
            });
            $('.autonumeric').each(function () {
                var autonumeric = new AutoNumeric(this, {
                    // minimumValue: -9999999999999,
                    // maximumValue: 9999999999999,
                    modifyValueOnWheel: false,
                    unformatOnSubmit: true,
                });
                autonumericFields.push(autonumeric);
            });
            $('.autonumeric-percentage').each(function () {
                var autonumeric = new AutoNumeric(this, {
                    minimumValue: 0,
                    maximumValue: 100,
                    modifyValueOnWheel: false,
                    unformatOnSubmit: true,
                });
                autonumericFields.push(autonumeric);
            });
        }
    };

    var handleDatePicker = function () {
        if (jQuery.fn.datepicker) {
            $('.date-picker').datepicker({
                orientation: "bottom",
                autoclose: true,
                language: 'th',
                todayHighlight: true,
                format: "dd/mm/yyyy",
                onSelect: function () {
                    $(this).change();
                }
            });
        }
    };

    var handleThaiDatePicker = function () {
        $.datetimepicker.setLocale('th');

        $('.date-picker-thai').datetimepicker({
            timepicker: false,
            yearOffset: 543,  // ใช้ปี พ.ศ. บวก 543 เพิ่มเข้าไปในปี ค.ศ
            inline: false,
            format: 'd/m/Y',
            closeOnDateSelect: true
        });
    };

    var handleDateTimePicker = function () {
        $('.datepicker').datetimepicker({
            format: "dd/mm/yyyy",
            minView: 2,
            autoclose: true,
        });

        $('.monthpicker').datetimepicker({
            format: "MM/YYYY",
            viewMode: 'months',
        });

        $(".monthpicker").on("dp.show", function (e) {
            $(e.target).data("DateTimePicker").viewMode("months");
        });
    };

    var handleModalShow = function () {
        // $('.modal').on('shown.bs.modal', function () {
        //     handleAutoNumeric();
        // })
        $(document).on('show.bs.modal', '.modal', function (event) {
            var zIndex = 10400 + (10 * $('.modal:visible').length);
            $(this).css('z-index', zIndex);
            setTimeout(function () {
                $('.modal-backdrop').not('.modal-stack').css('z-index', zIndex - 1).addClass('modal-stack');
            }, 0);

            var animation = $(event.relatedTarget).data('animation') || 'effect-scale';
            $(this).addClass(animation);

            $('body').addClass('no-scroll');

            setTimeout(() => {
                $('.modal').find('input[type="text"]').first().focus();
            }, 500);

        });
    }

    var handleModalClose = function () {
        $('.modal').on('hidden.bs.modal', function () {
            $(this).find('input, textarea, select').each(function () {
                const ignored = ['_token', '_method'];

                if ($.inArray($(this).attr('name'), ignored) < 0 && !$(this).hasClass('ignore-clear'))
                    $(this).val('');

                if ($(this).hasClass('selectpicker')) {
                    $(this).selectpicker('val', $(this).find('option').first().val());
                }
            });
            $(this).find('input.autonumeric, input.autonumeric-integer, input.autonumeric-percent, input.autonumeric-minute').each(function () {
                $(this).val('0');
            });
            $(this).find('.has-error').each(function () {
                $(this).removeClass('has-error');
            });
            $(this).find('.error-help-block').each(function () {
                $(this).empty();
            });

            // hide modal with effect
            $(this).removeClass(function (index, className) {
                return (className.match(/(^|\s)effect-\S+/g) || []).join(' ');
            });

            $('body').removeClass('no-scroll');

            console.log('closed modal!');
        });
    }

    var initFormRequired = function () {
        $('.form-group').each(function () {
            if ($(this).find('[required]').length && !$(this).find('label span.required').length)
                $(this).find('label').append(' <span class="required" aria-required="true">*</span>');
        });
    };

    var handleTableHover = function () {
        $('.table').on('mouseover', 'tbody>tr', function () {
            $(this).find('.table-actions').toggleClass('hidden');
        })
        $('.table').on('mouseout', 'tbody>tr', function () {
            $(this).find('.table-actions').toggleClass('hidden');
        })
    };

    var handleTabToggle = function () {
        $('a[data-toggle="tab"]').on('click', function () {
            window.location.hash = $(this).attr('href');
        });
    };

    var handleInputGroup = function () {
        $(document).on('click', 'input', function (e) {
            var $inputGroup = $(this).parent('.input-group');
            $inputGroup.addClass('active');
        });
        $(document).on('blur', 'input', function (e) {
            var $inputGroup = $(this).parent('.input-group');
            $inputGroup.removeClass('active');
        });
    };

    var handleScrollers = function () {
        if (!$().slimScroll) {
            return;
        }

        $('.scroller').each(function () {
            if ($(this).attr("data-initialized")) {
                return; // exit
            }

            var height;

            if ($(this).attr("data-height")) {
                height = $(this).attr("data-height");
            } else {
                height = $(this).css('height');
            }

            $(this).slimScroll({
                allowPageScroll: true, // allow page scroll when the element scroll is ended
                size: '7px',
                color: ($(this).attr("data-handle-color") ? $(this).attr("data-handle-color") : '#bbb'),
                wrapperClass: ($(this).attr("data-wrapper-class") ? $(this).attr("data-wrapper-class") : 'slimScrollDiv'),
                railColor: ($(this).attr("data-rail-color") ? $(this).attr("data-rail-color") : '#eaeaea'),
                position: 'right',
                height: height,
                alwaysVisible: ($(this).attr("data-always-visible") == "1" ? true : false),
                railVisible: ($(this).attr("data-rail-visible") == "1" ? true : false),
                disableFadeOut: true
            });

            $(this).attr("data-initialized", "1");
        });
    };

    var handleCounterup = function () {
        if (!$().counterUp) {
            return;
        }

        $("[data-counter='counterup']").counterUp({
            delay: 10,
            time: 1000
        });
    };

    var handleTooltip = function () {
        $('.tooltips').tooltip();
    };

    // var handlePortletTools = function () {
    //     // handle portlet remove
    //     $('body').on('click', '.portlet > .portlet-title > .tools > a.remove', function (e) {
    //         e.preventDefault();
    //         var portlet = $(this).closest(".portlet");

    //         if ($('body').hasClass('page-portlet-fullscreen')) {
    //             $('body').removeClass('page-portlet-fullscreen');
    //         }

    //         portlet.find('.portlet-title .fullscreen').tooltip('destroy');
    //         portlet.find('.portlet-title > .tools > .reload').tooltip('destroy');
    //         portlet.find('.portlet-title > .tools > .remove').tooltip('destroy');
    //         portlet.find('.portlet-title > .tools > .config').tooltip('destroy');
    //         portlet.find('.portlet-title > .tools > .collapse, .portlet > .portlet-title > .tools > .expand').tooltip('destroy');

    //         portlet.remove();
    //     });

    //     // handle portlet fullscreen
    //     $('body').on('click', '.portlet > .portlet-title .fullscreen', function (e) {
    //         e.preventDefault();
    //         var portlet = $(this).closest(".portlet");
    //         if (portlet.hasClass('portlet-fullscreen')) {
    //             $(this).removeClass('on');
    //             portlet.removeClass('portlet-fullscreen');
    //             $('body').removeClass('page-portlet-fullscreen');
    //             portlet.children('.portlet-body').css('height', 'auto');
    //         } else {
    //             var height = App.getViewPort().height -
    //                 portlet.children('.portlet-title').outerHeight() -
    //                 parseInt(portlet.children('.portlet-body').css('padding-top')) -
    //                 parseInt(portlet.children('.portlet-body').css('padding-bottom'));

    //             $(this).addClass('on');
    //             portlet.addClass('portlet-fullscreen');
    //             $('body').addClass('page-portlet-fullscreen');
    //             portlet.children('.portlet-body').css('height', height);
    //         }
    //     });

    //     $('body').on('click', '.portlet > .portlet-title > .tools > .collapse, .portlet .portlet-title > .tools > .expand', function (e) {
    //         e.preventDefault();
    //         var el = $(this).closest(".portlet").children(".portlet-body");
    //         if ($(this).hasClass("collapse")) {
    //             $(this).removeClass("collapse").addClass("expand");
    //             el.slideUp(200);
    //         } else {
    //             $(this).removeClass("expand").addClass("collapse");
    //             el.slideDown(200);
    //         }
    //     });
    // };

    var preventEnterSubmit = function () {
        if (!$('.enable-enter-submit').length) {
            $(window).keydown(function (event) {
                if (event.keyCode == 13) {
                    event.preventDefault();
                    return false;
                }
            });
        }
    };

    var initAutoSize = function () {
        setTimeout(() => {
            autosize($('.autosize'));
        }, 500);
    }

    var handleSearch = function () {
        var timer, delay = 500;

        $('.input-search').bind('keydown search', function (e) {
            var ignored = [9, 18, 16, 112, 113, 114, 115];
            if (ignored.indexOf(e.which) != -1) return;

            var _this = $(this);
            clearTimeout(timer);
            timer = setTimeout(function () {
                searchData.terms = _this.val();
                datatable.draw();
            }, delay);
        });
    };

    var handleAcfSwitch = function () {
        $('body').on('click', '.acf-switch', function () {
            $(this).toggleClass('-on');
        });
    };

    var initFloatingPortlet = function () {
        var container = $('.portlet.floating');
        if (container.length) {
            $(window).scroll(function () {
                if ($(window).scrollTop() > 225) {
                    var $parent = container.parent();
                    container.addClass("fixed");
                    container.css('width', $parent.width());
                } else {
                    container.removeClass("fixed");
                }
            });
        }
    };

    var initLightbox = function () {
        lightbox.option({
            'resizeDuration': 200,
            // wrapAround: true,
            'alwaysShowNavOnTouchDevices': true,
            'fadeDuration': 150,
            'imageFadeDuration': 150,
            'resizeDuration': 150
        })
    };

    var handleFloatingActions = function () {
        var $container = $('.page-actions');
        if ($container.length)
            $(window).scroll(function () {
                if ($(window).scrollTop() > 255) {
                    var $parent = $container.parent();
                    $container.addClass("fixed");
                    $container.find('.d-flex').css('width', $parent.width());
                    // container.css('width', $parent.width());
                } else {
                    $container.removeClass("fixed");
                }
            });
    };

    // var handleFlashMessage = function () {
    //     app.statusbar.open('#statusbar-success');
    //     $('#statusbar-success').delay(1500).fadeOut(300);

    //     // app.statusbar.open('#statusbar-failed');
    //     // $('#statusbar-failed').delay(2500).fadeOut(300);
    // }

    var handleStatusToggle = function () {
        $('table').on('change', 'input[name="status"]', function (e) {
            const moduleUrl = $(e.target).data('module-url');
            const id = $(e.target).data('id');
            const active = $(e.target).prop('checked');

            $.ajax({
                url: `${moduleUrl}/${id}/status`,
                type: 'post',
                data: { active },
                success: function (resp) {
                    App.showSuccess(resp);
                    console.log(resp);
                },
                error: function () {
                    App.showError('');
                }
            });
        });
    }

    var handlePreviewData = function () {
        $('table').on('click', '.btn-view', function (e) {
            var $el = $(e.target).hasClass('fa') ? $(e.target).parent() : $(this);
            const moduleUrl = $el.data('module-url');

            Loading.show();

            $('#preview-frame').attr('src', moduleUrl + '?_t=' + Date.now());

            setTimeout(() => {
                $('#modal-preview').modal('show');
                setTimeout(() => {
                    Loading.hide();
                }, 300);
            }, 500);
        });
    }

    return {
        init: function () {
            handleTabs();
            handleDeleteButton();
            handleDeleteImage();
            handleSelectTwo();
            handleBootstrapSelect();
            handleAutoNumeric();
            handleDatePicker();
            // handleThaiDatePicker();
            handleDateTimePicker();
            handleModalClose();
            handleTableHover();
            handleTabToggle();
            handleInputGroup();
            handleScrollers();
            handleCounterup();
            // handlePortletTools();
            handleTooltip();
            handleModalShow();
            handleSearch();
            handleAcfSwitch();
            //handleFlashMessage();
            initFormRequired();
            initAutoSize();
            initFloatingPortlet();
            handleFloatingActions();
            handleStatusToggle();
            handlePreviewData();
            // initLightbox();
            //preventEnterSubmit();
        },
        getautonumericFields: function () {
            return autonumericFields;
        },
        scrollTo: function (el, offeset) {
            var pos = (el && el.length > 0) ? el.offset().top : 0;

            if (el) {
                if ($('body').hasClass('page-header-fixed')) {
                    pos = pos - $('.page-header').height();
                } else if ($('body').hasClass('page-header-top-fixed')) {
                    pos = pos - $('.page-header-top').height();
                } else if ($('body').hasClass('page-header-menu-fixed')) {
                    pos = pos - $('.page-header-menu').height();
                }
                pos = pos + (offeset ? offeset : -1 * el.height());
            }

            $('html,body').animate({
                scrollTop: pos
            }, '1500');
        },

        alert: function (msg, title, callback) {
            if (title) {
                swal({
                    title: title,
                    html: msg
                })
                    .then(function (isConfirm) {
                        if (isConfirm && isConfirm.value) {
                            if (callback) {
                                callback()
                            };
                        }
                    });
            } else {
                swal({
                    title: "",
                    html: msg
                })
                    .then(function (isConfirm) {
                        if (isConfirm && isConfirm.value) {
                            if (callback) {
                                callback()
                            };
                        }
                    });
            }
        },

        resetSubmitButton: function (element) {
            element.prop('disabled', false);
            var btnText = element.html().replace('<i class="fa fa-circle-o-notch fa-spin margin-left-10"></i>', '');
            element.html(btnText);
        },

        blockUI: function (options) {
            options = $.extend(true, {}, options);
            var html = '';
            if (options.animate) {
                html = '<div class="loading-message ' + (options.boxed ? 'loading-message-boxed' : '') + '">' + '<div class="block-spinner-bar"><div class="bounce1"></div><div class="bounce2"></div><div class="bounce3"></div></div>' + '</div>';
            } else if (options.iconOnly) {
                html = '<div class="loading-message ' + (options.boxed ? 'loading-message-boxed' : '') + '"><img src="' + this.getGlobalImgPath() + 'loading-spinner-grey.gif" align=""></div>';
            } else if (options.textOnly) {
                html = '<div class="loading-message ' + (options.boxed ? 'loading-message-boxed' : '') + '"><span>&nbsp;&nbsp;' + (options.message ? options.message : 'LOADING...') + '</span></div>';
            } else {
                html = '<div class="loading-message ' + (options.boxed ? 'loading-message-boxed' : '') + '"><img src="' + this.getGlobalImgPath() + 'loading-spinner-grey.gif" align=""><span>&nbsp;&nbsp;' + (options.message ? options.message : 'LOADING...') + '</span></div>';
            }

            if (options.target) { // element blocking
                var el = $(options.target);
                if (el.height() <= ($(window).height())) {
                    options.cenrerY = true;
                }
                el.block({
                    message: html,
                    baseZ: options.zIndex ? options.zIndex : 1000,
                    centerY: options.cenrerY !== undefined ? options.cenrerY : false,
                    css: {
                        top: '10%',
                        border: '0',
                        padding: '0',
                        backgroundColor: 'none'
                    },
                    overlayCSS: {
                        backgroundColor: options.overlayColor ? options.overlayColor : '#555',
                        opacity: options.boxed ? 0.05 : 0.1,
                        cursor: 'wait'
                    }
                });
            } else { // page blocking
                $.blockUI({
                    message: html,
                    baseZ: options.zIndex ? options.zIndex : 1000,
                    css: {
                        border: '0',
                        padding: '0',
                        backgroundColor: 'none'
                    },
                    overlayCSS: {
                        backgroundColor: options.overlayColor ? options.overlayColor : '#555',
                        opacity: options.boxed ? 0.05 : 0.1,
                        cursor: 'wait'
                    }
                });
            }
        },

        // wrApper function to  un-block element(finish loading)
        unblockUI: function (target) {
            // if (target) {
            //     $(target).unblock({
            //         onUnblock: function() {
            //             $(target).css('position', '');
            //             $(target).css('zoom', '');
            //         }
            //     });
            // } else {
            //     $.unblockUI();
            // }
        },

        toLocalDate: function (number) {
            var lang = Lang.app_language;
            moment.locale(lang);
            var date = new Date(number * 1000);
            var result = lang == 'th' ? moment(date).add('years', 543) : moment(date);
            return result;
        },

        getParam: function (name, url) {
            if (!url) url = window.location.href;
            name = name.replace(/[\[\]]/g, "\\$&");
            var regex = new RegExp("[?&]" + name + "(=([^&#]*)|&|#|$)"),
                results = regex.exec(url);
            if (!results) return null;
            if (!results[2]) return '';
            return decodeURIComponent(results[2].replace(/\+/g, " "));
        },

        getParams: function () {
            var prmstr = window.location.search.substr(1);

            function transformToAssocArray(prmstr) {
                var params = {};
                var prmarr = prmstr.split("&");
                for (var i = 0; i < prmarr.length; i++) {
                    var tmparr = prmarr[i].split("=");
                    params[tmparr[0]] = tmparr[1];
                }
                return params;
            }

            return prmstr != null && prmstr != "" ? transformToAssocArray(prmstr) : {};;
        },

        getViewPort: function () {
            var e = window,
                a = 'inner';
            if (!('innerWidth' in window)) {
                a = 'client';
                e = document.documentElement || document.body;
            }

            return {
                width: e[a + 'Width'],
                height: e[a + 'Height']
            };
        },

        showFormErrors: function (errors, form, reload) {
            if (errors && errors['errors'] !== undefined) {
                $.each(errors['errors'], function (key, value) {
                    var formGroup = form.find('#' + key).parents('.form-group');
                    if (!formGroup.length)
                        formGroup = form.find('[name=' + key + ']').parents('.form-group');

                    formGroup.addClass('has-error').removeClass('has-success');

                    var jQueryValidationElm = formGroup.find('.help-block-error');
                    if (jQueryValidationElm.length) {
                        jQueryValidationElm.text(value);
                    } else {
                        formGroup.append('<span class="help-block help-block-error">' + value + '</span>')
                        formGroup.find('.help-block-error').text(value);
                    }
                    formGroup.find('.help-block-error').show();
                });
            } else {
                if (debug && (typeof errors == "object")) {
                    var html = errors.message;
                    if (errors.file)
                        html += ': ' + errors.file;
                    if (errors.line)
                        html += ', Line: ' + errors.line;
                } else {
                    var html = '<strong>Oops!</strong> Something went wrong. Please contact the administrator.';
                }

                noty({
                    text: html,
                    type: 'error',
                    layout: 'top',
                    animation: {
                        open: 'animated fadeInDown',
                        close: 'animated fadeOutUp',
                        speed: 150
                    }
                });

                $('.modal').modal('hide');
            }
        },
        showSuccess: function (resp, reload) {
            noty({
                text: resp.message,
                type: 'success'
            });
        },
        showInfo: function (msg, title) {
            noty({
                text: resp.message,
                type: 'info'
            });
        },
        showSucessOrRedirect: function (id, submitMethod, form) {
            if (submitMethod == 'PUT') {
                var resp = {
                    id: id,
                    message: Lang.get('shared.save_success')
                }
                App.showSuccess(resp);
                App.resetSubmitButton(form.find('[type="submit"]'));
                var inputs = form.find("input, select, button, textarea");
                setTimeout(function () {
                    inputs.prop("disabled", false);
                }, 500);
            } else {
                var pathArray = location.pathname.split('/');
                var redirectUrl = form.attr('redirect-url');
                if (redirectUrl && redirectUrl.indexOf('{id}') != -1) {
                    redirectUrl = redirectUrl.replace('{id}', id);
                }
                location.href = utility.getAppUrl() + (redirectUrl || pathArray[1] || '');
            }
        },
        show403: function () {
            swal({
                html: 'คุณไม่ได้รับอนุญาตให้กระทำการดังกล่าว <br />หรือไม่มีสิทธิ์ในการเข้าถึงข้อมูลส่วนนี้<p>กรุณาติดต่อผู้ดูแลระบบ</p>',
                type: 'warning',
                showCancelButton: false,
            }).then(function () {
                if (callback) {
                    callback();
                }
            });
        },
        showDeleteDependency: function (result) {

            function getTemplate(result) {
                var htmlStr = '<small>ไม่สามารถลข้อมูลได้ เนื่องจากข้อมูลนี้ถูกเลือกใช้งานอยู่ <br>โดยรายการข้อมูลดังต่อไปนี้</small><br><br>' +
                    '<table class="table table-hover table-bordered">' +
                    '<thead><tr><th class="text-center">รายการ</th><th class="text-center">รหัสข้อมูล</th><th class="text-center">ชื่อภาษาไทย</th></tr></thead><tbody>';

                var errors = result.errors;
                var template = $('#template-dependency').html();

                errors.forEach(error => {
                    htmlStr += template.replace(/{group}/g, error.group)
                        .replace(/{id}/g, error.id)
                        .replace(/{url}/g, error.url)
                        .replace(/{name}/g, error.name);
                });

                htmlStr += '</tbody></table>';
                return htmlStr;
            }

            swal({
                html: result.message, //'ไม่สามารถลบข้อมูลได้ เนื่องจากข้อมูลถูกใช้งานอยู่',
                type: 'warning',
                showCancelButton: false,
            }, function () {
                // if (callback) {
                //     callback();
                // }
            });
        },
        navigation: function () {

            function parseURL(url) {
                parsed_url = {}

                if (url == null || url.length == 0)
                    return parsed_url;

                protocol_i = url.indexOf('://');
                parsed_url.protocol = url.substr(0, protocol_i);

                remaining_url = url.substr(protocol_i + 3, url.length);
                domain_i = remaining_url.indexOf('/');
                domain_i = domain_i == -1 ? remaining_url.length - 1 : domain_i;
                parsed_url.domain = remaining_url.substr(0, domain_i);
                parsed_url.path = domain_i == -1 || domain_i + 1 == remaining_url.length ? null : remaining_url.substr(domain_i + 1, remaining_url.length);

                domain_parts = parsed_url.domain.split('.');
                switch (domain_parts.length) {
                    case 2:
                        parsed_url.subdomain = null;
                        parsed_url.host = domain_parts[0];
                        parsed_url.tld = domain_parts[1];
                        break;
                    case 3:
                        parsed_url.subdomain = domain_parts[0];
                        parsed_url.host = domain_parts[1];
                        parsed_url.tld = domain_parts[2];
                        break;
                    case 4:
                        parsed_url.subdomain = domain_parts[0];
                        parsed_url.host = domain_parts[1];
                        parsed_url.tld = domain_parts[2] + '.' + domain_parts[3];
                        break;
                }

                parsed_url.parent_domain = parsed_url.host + '.' + parsed_url.tld;

                return parsed_url;
            }
            // set openable navigation items
            //$(".app-navigation nav > ul").find("ul").parent("li").addClass("openable");

            // set open element if it's avail

            // if(app.settings.navDetectAuto && !$(".app-navigation").hasClass("app-navigation-minimized")) {

            // }


            // horizontal navigation handler
            // $('.nav-link nav > ul > li > ul").each(function(){
            //     $(this).parent("li").addClass("openable");
            // });

            function buildPage(page, pathArray, i) {
                if (pathArray[i + 1] !== undefined) {
                    return page + buildPage(page, pathArray, i + 1);
                }
                return pathArray[i] + '/';
            }

            // set open element if it's avail
            var uri = parseURL(window.location.href.split(/[?#]/)[0]);
            var path = window.location.href.split(/[?#]/)[0],
                pathArray = path.split("/");

            if ($('a.nav-link[href="' + path + '"]').length) {
                $('a.nav-link[href="' + path + '"]').append('<span class="selected"></span>').parent("li").addClass("active");
            }
            else {
                page = uri.protocol + '://' + uri.domain + '/' + pathArray[3] + '/' + pathArray[4] + '/' + pathArray[5];
                if (!$('a.nav-link[href="' + page + '"]').length) {
                    page = uri.protocol + '://' + uri.domain + '/' + pathArray[3] + '/' + pathArray[4];
                }
                if (!$('a.nav-link[href="' + page + '"]').length) {
                    page = uri.protocol + '://' + uri.domain + '/' + pathArray[3];
                }
                $('a.nav-link[href="' + page + '"]').append('<span class="selected"></span>').parent("li").addClass("active");
            }

            // $('.nav-link .openable > a").on("click",function(e){
            //     e.stopPropagation();

            //     var nav = $(this).parents('.nav-link");
            //     nav.find(".openable").removeClass("active");

            //     $(this).parent(".openable").addClass("active");

            //     return false;
            // });
            // end horizontal navigation handler
        },
        error: function (msg, callback) {
            swal({
                html: msg,
                type: 'error',
                showCancelButton: false,
            }).then(function () {
                if (callback) {
                    callback();
                }
            });
        },

        warning: function (msg, title = '', callback) {
            swal({
                title: title,
                html: msg,
                type: 'warning',
                showCancelButton: false,
            }).then(function () {
                if (callback) {
                    callback();
                }
            });
        },

        confirm: function (msg, callback) {
            swal({
                html: msg,
                //type: "warning",
                showCancelButton: true,
                // confirmButtonColor: "#EF4836",
                confirmButtonText: "ยืนยัน",
                cancelButtonText: "ยกเลิก",
                closeOnConfirm: true,
                closeOnCancel: true,
                focusCancel: true,
                showCloseButton: true,
                showLoaderOnConfirm: true,
                animation: false

            }, function (isConfirm) {
                if (isConfirm) {
                    if (callback) {
                        callback();
                    }
                    //swal("Deleted!", "Your imaginary file has been deleted.", "success");
                }
                return isConfirm;

            });

        },
        confirmWide: function (msg, callback) {
            swal({
                html: msg,
                //type: "warning",
                showCancelButton: true,
                confirmButtonColor: "#EF4836",
                confirmButtonText: "ยืนยัน",
                cancelButtonText: "ยกเลิก",
                closeOnConfirm: false,
                closeOnCancel: false,
                focusCancel: true,
                showCloseButton: true,
                showLoaderOnConfirm: true,
                animation: false,
                customClass: 'swal-wide',
            }).then(function (isConfirm) {
                if (isConfirm) {
                    if (callback) {
                        callback();
                    }
                    //swal("Deleted!", "Your imaginary file has been deleted.", "success");
                }
                return isConfirm;
            }).catch(swal.noop);
        },
        hideModal: function (elem) {
            // $(elem).removeClass("in");
            // $(".modal-backdrop").remove();
            // $('body').removeClass('modal-open');
            // $('body').css('padding-right', '');
            // $(elem).hide();

            console.log('try hide modal', elem);

            setTimeout(() => {

                console.log($(elem).find('.btn-dismiss'));

                $(elem).find('.btn-dismiss').click();
            }, 150);
        },
        uuid: function () {
            return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {
                var r = Math.random() * 16 | 0, v = c == 'x' ? r : (r & 0x3 | 0x8);
                return v.toString(16);
            });
        },
        renderDotdotdot: function (data) {
            return data.length > 100 ? data.substr(0, 100) + "..." : data;
        },
        renderTribeNamesTable: function (data) {
            var htmlStr = '';
            var names = JSON.parse(data);
            names.forEach(elem => {
                var property = elem.property;
                var template = property.text ? $('#template-tribe-names').html() : $('#template-tribe-names-only').html();
                var defaultIcon = property.default ? '<span class="font-blue-soft sbold">*</span>' : '';
                var tribeName = property.default ? elem.tribe_name : elem.tribe_name;

                htmlStr += template.replace(/{tribe_name}/g, tribeName)
                    .replace(/{name}/g, property.name)
                    .replace(/{default}/g, defaultIcon)
                    .replace(/{font_family_class}/g, elem.font_family_class);

                if (property.text)
                    htmlStr = htmlStr.replace(/{text}/g, property.text);

            });
            return htmlStr;
        },
        renderTableActions: function (moduleUrl, id, name) {
            var baseUrl = moduleUrl + '/' + id;
            var attrName = ' data-name="' + name + '"';
            var attrActionUrl = ' data-action-url="' + baseUrl + '"';

            var btnEdit = `<a href="${baseUrl}/edit" class="btn btn-icon tooltips btn-edit" data-title="แก้ไข"><i class="fa fa-edit"></i></a>`;
            var btnDel = `<a href="javascript:;" ${attrName} ${attrActionUrl} class="btn btn-icon btn-delete tooltips" data-title="ลบ"><i class="fa fa-trash"></i></a>`;

            var actions = btnEdit + btnDel;
            return actions;
        },
        renderTableActionsWithPreview: function (moduleUrl, id, name) {
            var baseUrl = moduleUrl + '/' + id;
            var attrName = ' data-name="' + name + '"';
            var attrActionUrl = ' data-action-url="' + baseUrl + '"';

            var btnView = `<a href="javascript:;" data-module-url="${baseUrl}" class="btn btn-icon tooltips btn-view" data-title="ดูข้อมูล"><i class="fa fa-search"></i></a>`;
            var btnEdit = `<a href="${baseUrl}/edit" class="btn btn-icon tooltips btn-edit" data-title="แก้ไข"><i class="fa fa-edit"></i></a>`;
            var btnDel = `<a href="javascript:;" ${attrName} ${attrActionUrl} class="btn btn-icon btn-delete tooltips" data-title="ลบ"><i class="fa fa-trash"></i></a>`;

            var actions = btnView + btnEdit + btnDel;
            return actions;
        }

    }

}();

$(function () {
    App.init();
    App.navigation();

    $.ajaxSetup({
        headers: {
            'X-CSRF-TOKEN': token
        }
    });

    // if (e.keyCode == 27) {
    //     $('.modal').modal('hide');
    // }
});

//handle dropzone set global option for not auto detect
if (typeof Dropzone !== undefined) {
    Dropzone.autoDiscover = false;

    // Dropzone.options.myDropzone = {
    //     autoDiscover: false,
    //     thumbnailWidth: null,
    //     thumbnailHeight: null,
    // };
}

$.noty.defaults = {
    layout: 'topRight',
    theme: 'defaultTheme', // or relax // defaultTheme
    type: 'alert', // success, error, warning, information, notification
    text: '', // [string|html] can be HTML or STRING

    dismissQueue: true, // [boolean] If you want to use queue feature set this true
    force: false, // [boolean] adds notification to the beginning of queue when set to true
    maxVisible: 5, // [integer] you can set max visible notification count for dismissQueue true option,

    template: '<div class="noty_message"><span class="noty_text"></span><div class="noty_close"></div></div>',

    timeout: 2000, // [integer|boolean] delay for closing event in milliseconds. Set false for sticky notifications
    progressBar: false, // [boolean] - displays a progress bar

    animation: {
        open: 'animated fadeInDown',
        close: 'animated fadeOut',
        // easing: 'swing',
        speed: 150 // opening & closing animation speed
    },
    closeWith: ['backdrop'], // ['click', 'button', 'hover', 'backdrop'] // backdrop click will close all notifications

    modal: false, // [boolean] if true adds an overlay
    killer: false, // [boolean] if true closes all notifications and shows itself

    callback: {
        onShow: function () { },
        afterShow: function () { },
        onClose: function () { },
        afterClose: function () { },
        onCloseClick: function () { },
    },

    buttons: false // [boolean|array] an array of buttons, for creating confirmation dialogs.
};

Number.prototype.toNumber = function (c) {
    var n = this;
    var c = isNaN(c = Math.abs(c)) ? 2 : c;
    return parseFloat(n).toFixed(c).replace(/(\d)(?=(\d\d\d)+(?!\d))/g, "$1,");
};

String.prototype.toNumber = function (c) {
    var n = this;
    var c = isNaN(c = Math.abs(c)) ? 2 : c;
    return parseFloat(n).toFixed(c).replace(/(\d)(?=(\d\d\d)+(?!\d))/g, "$1,");
};

String.prototype.dotdotdot = function () {
    var d = this;
    return d.length > 100 ? '<span class="" data-container="body" data-placement="bottom" data-trigger="hover" data-content="' + d + '">' + d.substr(0, 100) + "...</span>" : d;
};

Number.prototype.getNumber = function (c) {
    var n = this || 0;
    if (c)
        return parseFloat(n.toString().replace(',', '')).toFixed(c);
    else
        return parseFloat(n.toString().replace(',', ''));
};

String.prototype.getNumber = function (c) {
    var n = this || 0;
    if (c)
        return parseFloat(n.toString().replace(',', '')).toFixed(c);
    else
        return parseFloat(n.toString().replace(',', ''));
};

function htmlEncode(value) {
    "use strict";
    //create a in-memory div, set it's inner text(which jQuery automatically encodes)
    //then grab the encoded contents back out.  The div never exists on the page.
    return $('<div/>').text(value).html();
}

function htmlDecode(value) {
    "use strict";
    return $('<div/>').html(value).text();
}

"use strict";

var app = {
    app: false,
    isloaded: false,
    header: false,
    footer: false,
    settings: {
        navDetectAuto: true,
        navHorizontalDetectAuto: true,
        screen_md: 992,
        sidepanelMobileHeight: 400,
        sidebarMobileHeight: 400
    },
    accordion_settings: { titleHeight: 50, noResize: false },

    init: function () {
        this.app = $(".app");
        this.header = $(".app > .app-header").length > 0 ? $(".app > .app-header") : false;
        this.footer = $(".app > .app-footer").length > 0 ? $(".app > .app-footer") : false;
    },
    layout: function () {

        // sidebars media
        app.layoutSidebars();
        // end

        // check header position
        if ($(".app-content > .app-header").length === 1)
            $(".app-container").addClass("app-header-inside-content");
        // end 

        // params for app-container
        $(".app-container").each(function () {
            var app_content = $(this).find(".app-content");

            $(this).find(".app-sidebar").each(function () {

                if ($(this).hasClass("dir-left")) {
                    app_content.addClass("app-sidebar-left");
                }

                if ($(this).hasClass("dir-right"))
                    app_content.addClass("app-sidebar-right");

            });
        });
        // end of params

        // sidebar actions        
        $(".app-sidebar-left-closed .app-sidebar, .app-sidebar-right-closed .app-sidebar").css("display", "none");

        $("[data-sidebar-toggle]").on("click", function () {
            var app_sidebar = $($(this).data("sidebar-toggle")),
                app_sidebar_direction = app_sidebar.hasClass("dir-left") ? 'left' : 'right',
                app_container = app_sidebar.parent(".app-container");

            if (app_container.hasClass("app-sidebar-" + app_sidebar_direction + "-closed")) {
                app_sidebar.css("display", "block");
                setTimeout(function () {
                    app_container.removeClass("app-sidebar-" + app_sidebar_direction + "-closed");
                }, 10);

            } else {
                app_sidebar.css("display", "none");
                app_container.addClass("app-sidebar-" + app_sidebar_direction + "-closed");
            }
            //app_container.toggleClass("app-sidebar-"+app_sidebar_direction+"-closed");            
            //app_sidebar.toggleClass("app-sidebar-open"); ??? WTF?

            $(window).resize();

            return false;
        });
        $("[data-sidebar-minimize]").on("click", function () {

            if ($(window).width() < app.settings.screen_md) return false;

            var app_sidebar = $($(this).data("sidebar-minimize")),
                app_sidebar_direction = app_sidebar.hasClass("dir-left") ? 'left' : 'right',
                app_container = app_sidebar.parent(".app-container"),
                toggle_class = "app-sidebar-" + app_sidebar_direction + "-minimized";

            app_container.removeClass("app-sidebar-" + app_sidebar_direction + "-closed");
            app_sidebar.css("display", "block");

            if (app_container.hasClass(toggle_class)) {
                app_container.removeClass(toggle_class);
                app_sidebar.removeClass("app-navigation-minimized").find("li.open").removeClass("open");
                app_sidebar.removeAttr("data-minimized").removeData("minimized");

                if (app_sidebar.hasClass("scroll"))
                    app_sidebar.mCustomScrollbar("update");
            } else {
                app_container.addClass(toggle_class);
                app_sidebar.addClass("app-navigation-minimized").find("li.open").removeClass("open");
                app_sidebar.removeAttr("data-minimized").removeData("minimized");

                if (app_sidebar.hasClass("scroll"))
                    app_sidebar.mCustomScrollbar("disable", true);
            }

            // fix after resize                                                
            $(window).resize();

            return false;
        });

        // sidepanel


        $("[data-sidepanel-toggle]").on("click", function () {
            var app_sidepanel = $($(this).data('sidepanel-toggle'));

            if ($(".app").hasClass("app-sidepanel-open")) {
                // close sidepanel
                $(".app").removeClass("app-sidepanel-open");

                // remove overlay if needs
                if (app_sidepanel.data("overlay") === 'show') {
                    app.hideOverlay();
                }

            } else {
                // open sidepanel
                $(".app").addClass("app-sidepanel-open");

                // show overlay if needs
                if (app_sidepanel.data("overlay") === 'show') {
                    app.showOverlay(function () {
                        $(".app-overlay").on("click", function () {
                            $(".app").removeClass("app-sidepanel-open");
                            app.hideOverlay();
                        });
                    });
                }
            }

            // fix after resize
            $(window).resize();

            return false;
        });
        // end sidepanel actions

        // separated content actions
        $("[data-separate-toggle-panel]").on("click", function () {
            $($(this).data("separate-toggle-panel")).toggleClass("open");
        });
    },
    layoutSidebars: function () {

        // control sidebar media
        if ($(window).width() < app.settings.screen_md) {
            if ($(".app-container").hasClass("app-sidebar-left-minimized")) {
                $(".app-container").removeClass("app-sidebar-left-minimized");
                $(".app-sidebar.dir-left").removeClass("app-navigation-minimized");
                $(".app-sidebar.dir-left").attr("data-minimized", "minimized");
            }
            if ($(".app-container").hasClass("app-sidebar-right-minimized")) {
                $(".app-container").removeClass("app-sidebar-right-minimized");
                $(".app-sidebar.dir-right").removeClass("app-navigation-minimized");
                $(".app-sidebar.dir-right").attr("data-minimized", "minimized");
            }
        } else {
            if ($(".app-sidebar.dir-left").data("minimized") === "minimized") {
                $(".app-container").addClass("app-sidebar-left-minimized");
                $(".app-sidebar.dir-left").addClass("app-navigation-minimized");
                $(".app-sidebar.dir-left").mCustomScrollbar("disable", true);
            }
            if ($(".app-sidebar.dir-right").data("minimized") === "minimized") {
                $(".app-container").addClass("app-sidebar-right-minimized");
                $(".app-sidebar.dir-right").addClass("app-navigation-minimized");
                $(".app-sidebar.dir-right").mCustomScrollbar("disable", true);
            }
        }
        // end

    },
    navigation: function () {

        function parseURL(url) {
            parsed_url = {}

            if (url == null || url.length == 0)
                return parsed_url;

            protocol_i = url.indexOf('://');
            parsed_url.protocol = url.substr(0, protocol_i);

            remaining_url = url.substr(protocol_i + 3, url.length);
            domain_i = remaining_url.indexOf('/');
            domain_i = domain_i == -1 ? remaining_url.length - 1 : domain_i;
            parsed_url.domain = remaining_url.substr(0, domain_i);
            parsed_url.path = domain_i == -1 || domain_i + 1 == remaining_url.length ? null : remaining_url.substr(domain_i + 1, remaining_url.length);

            domain_parts = parsed_url.domain.split('.');
            switch (domain_parts.length) {
                case 2:
                    parsed_url.subdomain = null;
                    parsed_url.host = domain_parts[0];
                    parsed_url.tld = domain_parts[1];
                    break;
                case 3:
                    parsed_url.subdomain = domain_parts[0];
                    parsed_url.host = domain_parts[1];
                    parsed_url.tld = domain_parts[2];
                    break;
                case 4:
                    parsed_url.subdomain = domain_parts[0];
                    parsed_url.host = domain_parts[1];
                    parsed_url.tld = domain_parts[2] + '.' + domain_parts[3];
                    break;
            }

            parsed_url.parent_domain = parsed_url.host + '.' + parsed_url.tld;

            return parsed_url;
        }

        // set openable navigation items
        $(".app-navigation nav > ul").find("ul").parent("li").addClass("openable");

        // set open element if it's avail
        if (app.settings.navDetectAuto && !$(".app-navigation").hasClass("app-navigation-minimized")) {
            var uri = parseURL(window.location.href.split(/[?#]/)[0]);
            var path = window.location.pathname,
                pathArray = path.split("/"),
                //page = pathArray[pathArray.length - 1];
                page = uri.protocol + '://' + uri.domain + '/' + pathArray[1] + (pathArray[2] !== undefined ? '/' + pathArray[2] : '');

            $(".app-navigation a[href='" + page + "']").addClass("active").parents(".openable").addClass("open");
        }

        // add open handler
        $(".app-navigation .openable > a").on("click", function (e) {
            e.stopPropagation();

            var element = $(this).parent(".openable");

            if (element.hasClass("open")) {
                element.removeClass("open");
                element.find("li.open").removeClass("open");
            } else {

                if (element.parents(".app-navigation").hasClass("app-navigation-minimized") || element.parents(".app-navigation").data("type") === "close-other") {
                    element.parent("ul").find("> li").not(element).removeClass("open");
                }

                //element.parents(".app-navigation").css("height","auto"); // Tell me why?
                element.addClass("open");

                setTimeout(function () {
                    // $(".app-navigation").mCustomScrollbar('scrollTo', element);
                }, 200);
            }

            // fix after resize

            if ($(".app-navigation").hasClass("scroll")) {
                $(".app-navigation").mCustomScrollbar("update");
            } else {
                $(window).resize();
            }

            return false;
        });

        // horizontal navigation handler 
        $(".app-navigation-horizontal nav > ul > li > ul").each(function () {
            $(this).parent("li").addClass("openable");
        });

        // set open element if it's avail
        if (app.settings.navHorizontalDetectAuto) {
            var path = window.location.pathname,
                pathArray = path.split("/"),
                page = pathArray[pathArray.length - 1];

            $(".app-navigation-horizontal a[href='" + page + "']").parent("li").addClass("active").parents(".openable").addClass("active");
        }

        $(".app-navigation-horizontal .openable > a").on("click", function (e) {
            e.stopPropagation();

            var nav = $(this).parents(".app-navigation-horizontal");
            nav.find(".openable").removeClass("active");

            $(this).parent(".openable").addClass("active");

            return false;
        });
        // end horizontal navigation handler 
    },
    navigationMobile: function () {

        /* Mobile navigation handler */
        if ($(".app-navigation-moblie-wrapper").length > 0) {
            $("[data-navigation-mobile-toggle]").on("click", function (e) {
                e.stopPropagation();
                $(".app").toggleClass("app-navigation-moblie-open");

                return false;
            });

            $(".app .app-navigation-mobile").on("click", function (e) {
                e.stopPropagation();
            });

            $(".app .app-content").on("click", function () {
                $(".app").removeClass("app-navigation-moblie-open");
            });
        }
        /* end Mobile navigation handler */

        /* header navigation handler */
        if ($(".app-header-navigation").length > 0) {

            $("[data-header-navigation-toggle]").on("click", function () {
                $(".app-header-navigation").toggleClass("show");
                return false;
            });

            $(".app-header-navigation li > a").on("click", function () {
                var pli = $(this).parent("li");

                if (pli.find("ul").length > 0 || pli.find(".app-header-navigation-megamenu").length > 0) {
                    pli.toggleClass("open");

                    return false;
                }
            });

        }
        /* end header navigation handler */

        /* navigation vertical handler */
        if ($(".app-navigation-horizontal").length > 0) {
            $("[data-navigation-horizontal-toggle]").on("click", function () {
                $(".app-navigation-horizontal").toggleClass("show");

                return false;
            });
        }
        /* end navigation vertical handler */
    },
    spy: function () {

        app.layoutSidebars();

        // return height to default
        if ($(".app-content .container-full-size").length > 0) {
            $(".app-content .container-full-size").removeAttr("style");
        }
        if ($(".block-flying").length > 0) {
            $(".block-flying").removeAttr("style");
            $(".block-flying .block-flying-content").removeAttr("style");
        }
        // end of...

        var winHeight = $(window).height(),
            offsetHeight = this._getHeaderHeight() + this._getFooterHeight() + this._getCustomOffset(),
            navFixed = $(".app-container .app-sidebar.app-navigation-fixed").length > 0 ? true : false,
            sidebars = $(".app-container .app-sidebar"),
            content = $(".app-container .app-content"),
            sidepanel = $(".app-sidepanel").length > 0 ? $(".app-sidepanel") : false;

        sidebars.css({ "height": "auto" });

        var contentHeight = app._getTotalHeight(content.children()),
            sidebarHeight = this._getMaxHeight(sidebars);


        if ($(window).width() > app.settings.screen_md) {

            if (contentHeight >= sidebarHeight && sidebarHeight !== 0) {

                if (sidebarHeight === 0 && (contentHeight + offsetHeight) < winHeight) {
                    content.height(winHeight - offsetHeight);
                } else {
                    if ((contentHeight + offsetHeight) <= winHeight) {
                        content.height(winHeight - offsetHeight);
                        contentHeight = content.height();
                    }
                }
                sidebars.height(contentHeight);
            } else {

                if ((contentHeight + offsetHeight) <= winHeight) {
                    content.height(winHeight - offsetHeight);
                }
                if ((sidebarHeight + offsetHeight) <= winHeight) {
                    sidebars.height(winHeight - offsetHeight);
                }
            }

            sidebars.each(function () {
                if ($(this).attr("data-control-height") === 'true') {
                    $(this).height(sidebarHeight);
                }
            });

            if ($("[data-separate-control-height]").length > 0) {
                var contentHeight = $(".app-container").height() - app._getTotalHeight($(".app-content > div").not(".app-content-separate"));
                $("[data-separate-control-height]").height(contentHeight);
            }


            if (navFixed) {
                var nav = $(".app-container .app-sidebar.app-navigation-fixed");

                if (app.footer) {
                    nav.addClass("app-navigation-fixed-absolute");

                    nav.height($(".app").height() - app.footer.height());
                } else
                    nav.height(winHeight);
            }

            if (sidepanel) sidepanel.height(winHeight);

        } else {
            if ($("[data-separate-control-height]").length > 0) {
                $("[data-separate-control-height]").css({ "height": "auto" });
            }

            sidebars.each(function () {
                if ($(this).attr("data-control-height") === 'true') {
                    $(this).height(app.settings.sidebarMobileHeight);
                } else {
                    $(this).css({ "height": "auto" });
                }
            });

            if (sidepanel)
                sidepanel.height($(window).height());
            //sidepanel.height(app.settings.sidepanelMobileHeight);
        }

        if ($(".app-content .container-full-size").length > 0) {
            $(".app-content .container-full-size").height(winHeight - $(".app-content .app-header").height() - 1);
        }

        if ($(".block-flying").length > 0) {
            $(".block-flying").height($(".block-flying").height());
            $(".block-flying .block-flying-content").height($(".block-flying").height() - app._getTotalHeight($(".block-flying > div").not(".block-flying-content")));

            if ($(window).width() < app.settings.screen_md) {
                $(".block-flying").width($(".app-container").width() - 30);
            }

        }

        return false;
    },

    /* block predefined functions */
    block: {
        delete: function (elm, fn) {
            elm = $(elm);

            elm.fadeOut(200, function () {
                $(this).remove();
            });

            if (typeof fn === "function") fn();

            app.spy();

            return false;
        },
        toggle: function (elm, fn) {
            elm = $(elm);

            elm.toggleClass("block-toggled");

            if (typeof fn === "function") fn();

            app.spy();

            return false;
        },
        expand: function (elm, fn) {
            elm = $(elm);

            elm.toggleClass("block-expanded");

            if (typeof fn === "function") fn();

            return false;
        },
        loading: {
            start: function (elm) {
                $(elm).append("<div class=\"block-loading-layer\"><div class=\"app-spinner loading loading-primary\"></div></div>");
                return true;
            },
            finish: function (elm) {
                $(elm).find(".block-loading-layer").remove();
                return true;
            }
        }
    },
    panel: {
        delete: function (elm, fn) {
            elm = $(elm);

            elm.fadeOut(200, function () {
                $(this).remove();
            });

            if (typeof fn === "function") fn();

            app.spy();

            return false;
        },
        toggle: function (elm, fn) {
            elm = $(elm);

            elm.toggleClass("panel-toggled");

            if (typeof fn === "function") fn();

            app.spy();

            return false;
        },
        expand: function (elm, fn) {
            elm = $(elm);

            elm.toggleClass("panel-expanded");

            if (typeof fn === "function") fn();

            return false;
        }
    },
    /* end block predefined functions */

    /* resizable layout */
    resizableLayout: function () {

        if ($(".app-content-resizable").length === 0) return false;

        var minWidth = 300,
            wrapper = $(".app-content-resizable"),
            columns = wrapper.children(".app-content-resizable-column");

        $(".app-content-resizable-column").not(":last-child").resizable({
            handles: "e",
            minWidth: minWidth,
            start: function (e, ui) {
                columns.each(function () {
                    $(this).width($(this).width());
                });
            },
            resize: function (e, ui) {

                var next = $(this).next(".app-content-resizable-column"),
                    otherElements = $(".app-content-resizable-column").not(next).not($(this)),
                    otherWidth = app._getMaxWidth(otherElements),
                    newWidth = wrapper.width() - otherWidth - ui.size.width;

                if (newWidth < minWidth) {
                    newWidth = minWidth;

                    $(this).width(wrapper.width() - otherWidth - minWidth);
                    next.width(newWidth);

                    return false;
                }

                next.width(newWidth);
            },
            stop: function (e, ui) {

                columns.each(function () {
                    $(this).width(Math.round(($(this).width() / wrapper.width()) * 100) + "%");
                });

            }
        });//.on('resize', function (e) {
        //e.stopPropagation(); 
        //});
    },
    /* end resizable layout */

    /* features */
    features: {
        gallery: {
            init: function () {
                this.controlHeight();

                $(".app-feature-gallery").on("click", "> li:first", function () {
                    var gallery = $(this).parents(".app-feature-gallery");
                    $(this).appendTo(gallery);
                });
            },
            controlHeight: function () {
                $(".app-feature-gallery").each(function () {
                    var felm = $(this).find("> li:first");
                    $(this).height(app._getTotalHeight(felm.children()));
                });
            }
        },
        preview: {
            init: function () {
                var preview = $("#preview"),
                    dialog = preview.find(".modal-dialog"),
                    content = preview.find(".modal-body");

                $(".preview").on("click", function () {
                    content.html("");
                    dialog.removeClass("modal-lg modal-sm modal-fw");

                    if ($(this).data("preview-image"))
                        content.append(app.features.preview.build.image($(this).data("preview-image")));

                    if ($(this).data("preview-video"))
                        content.append(app.features.preview.build.video($(this).data("preview-video")));

                    if ($(this).data("preview-href")) {
                        content.html(app.features.preview.build.href($(this).data("preview-href")));
                        app_plugins.loaded();
                    }

                    if ($(this).data("preview-size"))
                        dialog.addClass($(this).data("preview-size"));

                    if ($(this).data("preview-title") && $(this).data("preview-description"))
                        content.prepend(app.features.preview.build.text($(this).data("preview-title"), $(this).data("preview-description")));

                    preview.modal("show");

                    return false;
                });

                preview.on('hidden.bs.modal', function () {
                    content.html("");
                });

            },
            build: {
                image: function (src) {
                    return $("<img>").attr("src", src).addClass("img-responsive");
                },
                video: function (src) {
                    return $("<div class=\"app-preview-video\"><iframe src=\"" + src + "\" width=\"100%\" frameborder=\"0\" allowfullscreen></iframe></div>");
                },
                href: function (path) {

                    var result = null;

                    $.ajax({
                        url: path, type: 'get', dataType: 'html', async: false,
                        success: function (data) {
                            result = data;
                        }
                    });

                    return result;
                },
                text: function (title, description) {
                    return $("<div></div>").addClass("app-heading app-heading-small app-heading-condensed").append($("<div></div>").addClass("title").html("<h5>" + title + "</h5><p>" + description + "</p>"));
                }
            }
        }
    },
    /* end features */

    /* accordion feature */
    accordion: function () {

        if ($(".app-accordion").length > 0) {

            $(".app-accordion").each(function () {
                var app_accordion = $(this);

                app_accordion.find(".item").each(function () {
                    var app_accordion_item = $(this);

                    if (!app_accordion.data("type"))
                        app_accordion.addClass("app-accordion-simple");

                    app_accordion_item.find(".heading").on("click", function () {

                        if (app_accordion_item.hasClass("open"))
                            app_accordion_item.removeClass("open").removeAttr("style");
                        else
                            app_accordion_item.addClass("open");


                        if (app_accordion.data("open") === "close-other") {
                            app_accordion.find(".item").not(app_accordion_item).removeClass("open").removeAttr("style");
                        }

                        if (app_accordion.data("type") === "full-height") {
                            app.accordionFullHeight(app_accordion);
                        }

                    });
                });

            });

        }

    },
    accordionFullHeight: function (accordion) {
        if (accordion.hasClass("app-accordion-simple")) return false;

        var wrapper = accordion.parent("div"),
            items = accordion.find(".item"),
            itemsCount = items.length,
            openItemsCount = items.filter(".open").length;

        accordion.height(wrapper.height());

        var items = items.filter(".open");
        items.removeAttr("style");

        var freeHeight = wrapper.height() - (itemsCount - openItemsCount) * app.accordion_settings.titleHeight;
        var height = Math.floor(freeHeight / openItemsCount);

        items.each(function () {
            $(this).height(height);
            $(this).find(".content").height(height - app.accordion_settings.titleHeight);
        });
    },
    accordionFullHeightSpy: function () {
        $(".app-accordion").each(function () {
            app.accordionFullHeight($(this));
        });
    },
    accordionFullHeightResize: function () {
        $(".app-accordion").removeAttr("style").find(".item.open").removeAttr("style");

        delayBeforeFire(function () {
            app.accordionFullHeightSpy();
        }, 200);
    },
    /* end accordion feature */

    /* content tabs */
    contentTabs: function () {

        if ($(".app-content-tabs").length > 0) {

            $(".app-content-tabs a .close-tab").on("click", function (e) {
                e.stopPropagation();

                var act = $(this).parents(".app-content-tabs");

                $($(this).parent("a").attr("href")).remove();
                $(this).parents("li").remove();

                act.find("li:first > a").trigger("click");
            });

            $(".app-content-tabs a").on("click", function () {
                $(".app-content-tabs a, .app-content-tab").removeClass("active");
                $(this).addClass("active");
                $($(this).attr("href")).addClass("active");

                return false;
            });

        }

    },
    /* end content tabs */

    /* features */
    showOverlay: function (func) {
        $(".app-overlay").addClass("show");
        if (typeof func === "function") func();
    },
    hideOverlay: function () {
        $(".app-overlay").removeClass("show");
    },
    formsFile: function () {

        $("input.file").each(function () {
            var if_title = typeof $(this).attr("title") === "undefined" ? "Browse" : $(this).attr("title");
            var if_class = $(this).attr("class").replace("file", "");

            if_class = if_class === "" ? " btn-default" : if_class;
            if_class = $(this).is(":disabled") ? if_class + " disabled" : if_class;

            $(this).wrap("<a href=\"#\" class=\"file-input btn" + if_class + "\"></a>").parent("a").append(if_title);
            $(this).parent("a").after("<span class=\"file-input-name\"></span>");
        });

        $("input.file").on("change", function () {

            var files = $(this)[0].files,
                text = "",
                divider = files.length > 1 ? divider = ", " : "";

            for (var i = 0; i < files.length; i++)
                text += files[i].name.split('/').pop().split('\\').pop() + (i !== (files.length - 1) ? divider : "");

            $(this).parent("a").next(".file-input-name").html(text);
        });

    },
    misc: function () {
        /* avoid dropdown close inside header */
        $(document).on('click', '.app-header .dropdown-menu', function (e) {
            e.stopPropagation();
        });
        /* end */

        /* fix height after shown */
        $(".panel-collapse").on("shown.bs.collapse", function () {
            $(window).resize();
        });
        /* end */

        /* fix height after alert hidden */
        $(".alert-dismissible").on("closed.bs.alert", function () {
            $(window).resize();
        });
        /* end */

        /* fix height after tab shown */
        $("a[data-toggle='tab']").on("shown.bs.tab", function () {
            $(window).resize();
        });
        /* end */

        /* icon preview */
        $(".icons-preview > li").on("click", function () {

            var icon = $(this).find(".name").html();

            $("#modal-icon-preview .modal-icon-preview-name").html(icon);
            $("#modal-icon-preview .modal-icon-preview-span").val("<span class=\"" + icon + "\"></span>");
            $("#modal-icon-preview .modal-icon-preview-value").val(icon);
            $("#modal-icon-preview .modal-icon-preview-icon span").removeAttr("class").addClass(icon);

            $("#modal-icon-preview").modal("show");
        });

        $(".modal-icon-preview-value, .modal-icon-preview-span").on("click", function () {
            $(this).select();
        });
        /* end icon preview */

        /* lock screen */
        $(".app-lock .app-lock-user").on("click", function () {
            $(".app-lock").addClass("app-lock-open");
            $(".app-lock .app-lock-form").show().addClass("animated bounceIn");
            $(".app-lock .app-lock-form .form-control").focus();
        });
        /* ./lock screen */

        // New selector case insensivity        
        $.expr[':'].containsi = function (a, i, m) {
            return jQuery(a).text().toUpperCase().indexOf(m[3].toUpperCase()) >= 0;
        };
    },
    doc_nav: function () {

        var wH = $(window).height(),
            nav = $(".doc_fix_nav"),
            pdw = nav.parent("div").width() - 27;

        if (nav.length > 0) {
            nav.width(pdw);

            if (nav.height() > wH) {
                nav.height(wH - 60);
                nav.mCustomScrollbar({ axis: "y", autoHideScrollbar: true, scrollInertia: 200, advanced: { autoScrollOnFocus: false } });
            }

            $(window).scroll(function () {
                var wp = $(window).scrollTop();
                var point = $(document).height() - 397 - nav.outerHeight(true);

                if (wp > 175) {
                    nav.addClass("fixed");

                    if (wp > point)
                        nav.addClass("stack");
                    else
                        nav.removeClass("stack");

                } else {
                    nav.removeClass("fixed");
                }

            });

        }

    },
    loading: function (action, options) {

        var settings = $.extend({
            state: '',
            value: [0, 0],
            position: '',
            speed: 20,
            complete: null
        }, options);

        if (action == 'show' || action == 'update') {

            if (action == 'show') {
                $(".app-loading").remove();
                var loading = '<div class="app-loading ' + settings.position + '">\n\
                               <div class="app-loading-progress'+ (settings.state != '' ? ' app-loading-' + settings.state : '') + '" style="width:' + settings.value[0] + '%;"></div>\n\
                           </div>';
                $('body').append(loading);
            }

            var i = $.isArray(settings.value) ? settings.value[0] : $(".app-loading .app-loading-progress").width();
            var to = $.isArray(settings.value) ? settings.value[1] : settings.value;

            var timer = setInterval(function () {
                $(".app-loading .app-loading-progress").css('width', i + '%'); i++;

                if (i > to) {
                    clearInterval(timer);
                    if ($.isFunction(settings.complete)) {
                        settings.complete.call(this);
                    }
                }
            }, settings.speed);

        }

        if (action == 'destroy') {
            $(".app-loading").remove();
        }

    },
    statusbar: {
        init: function () {

            $(".app-statusbar-open, .app-statusbar-close").on("click", function () {
                app.statusbar.open($(this).attr('href'));
                return false;
            });

        },
        open: function (id) {
            $(".app-statusbar").hide();
            if ($(id).is(":hidden")) $(id).fadeIn();
        }
    },
    search: function () {

        $(".app-header-search").on("click", function () {
            $(".app-header-search > input").focus();
        });

    },
    /* table checkall */
    checkAll: function () {
        $("table .checkall").on("change", function () {
            var state = $(this).is(":checked") ? true : false;
            var tbody = $(this).parents("table").find("tbody");

            tbody.find("tr").each(function () {
                $(this).find("input:checkbox").prop("checked", state).attr("checked", state);
            });
        });
    },
    /* eof table checkall */
    _getTotalHeight: function (elm) {
        var totalHeight = 0;

        elm.each(function () {
            totalHeight += $(this).outerHeight(true);
        });

        return totalHeight;
    },
    _getMaxHeight: function (elm) {
        var maxHeight = 0;

        elm.each(function () {
            maxHeight = $(this).height() > maxHeight ? $(this).height() : maxHeight;
        });

        return maxHeight;
    },
    _getMaxWidth: function (elm) {
        var maxWidth = 0;

        elm.each(function () {
            maxWidth = $(this).width() > maxWidth ? $(this).width() : maxWidth;
        });

        return maxWidth;
    },
    _getHeaderHeight: function () {
        return this.header ? this.header.outerHeight(true) : 0;
    },
    _getFooterHeight: function () {
        return this.footer ? this.footer.outerHeight(true) : 0;
    },
    _getCustomOffset: function () {
        return this.app.data("offset-height") ? this.app.data("offset-height") : 0;
    },
    _delayBeforeFire: function () {
        var timer = 0;

        return function (callback, ms) {
            clearTimeout(timer);
            timer = setTimeout(callback, ms);
        };
    },
    _toggleClass: function (container, cl) {
        $(container).toggleClass(cl);

        // spy height changes
        app.spy();

        return false;
    },
    _addClass: function (container, cl) {
        $(container).addClass(cl);

        // spy height changes
        app.spy();

        return false;
    },
    _removeClass: function (container, cl) {
        $(container).removeClass(cl);

        // spy height changes
        app.spy();

        return false;
    },
    loaded: function () {
        app.spy();

        app.app.addClass("app-loaded");
        app.accordion();
        app.accordionFullHeightSpy();

        setTimeout(function () {
            $("body").scrollTop(0);
        }, 500);

        app.isloaded = true;
    }
};

$(function () {

    app.init();
    app.layout();
    app.resizableLayout();

    app.navigation();
    app.navigationMobile();
    app.contentTabs();
    app.formsFile();
    app.checkAll();

    app.features.gallery.init();
    app.features.preview.init();
    app.statusbar.init();

    app.search();

    app.misc();
    app.doc_nav();
});

$(window).resize(function () {

    delayBeforeFire(function () {
        app.accordionFullHeightResize();
        app.features.gallery.controlHeight();
        app.spy();
    }, 100);

});

var delayBeforeFire = (function () {
    var timer = 0;

    return function (callback, ms) {
        clearTimeout(timer);
        timer = setTimeout(callback, ms);
    };
})();
"use strict";

var app_plugins = {
    checkbox_radio: function () {
        if ($(".app-checkbox").length > 0 || $(".app-radio").length > 0) {
            $(".app-checkbox label, .app-radio label").each(function () {
                $(this).append("<span></span>");
            });
        }
    },
    switch_button: function () {

        if ($(".switch").length > 0) {
            $(".switch").each(function () {
                $(this).append("<span></span>");
            });

            $(".switch").find('input').on('change', function (e) {
                if ($(e.target).prop('checked'))
                    $(e.target).parent().addClass('checked');
                else
                    $(e.target).parent().removeClass('checked');
            })
        }

    },
    isotope: function () {
        if ($(".grid").length === 0) return false;

        var $grid = $(".grid").isotope({
            itemSelector: ".grid-element",
            layoutMode: "fitRows",
            percentPosition: true
        });

        $("button[data-filter]").on("click", function () {
            var filter = $(this).attr("data-filter");
            $grid.isotope({ filter: filter });

            $(this).parents(".btn-group").find(".btn-primary").removeClass("btn-primary").addClass("btn-default");
            $(this).removeClass("btn-default").addClass("btn-primary");
        });

        $(window).resize(function () {
            setTimeout(function () {
                $grid.isotope('layout');

                app.accordionFullHeightResize();
                app.features.gallery.controlHeight();
                app.spy();
            }, 100);
        });
    },
    formSpinner: function () {

        if ($("input.spinner").length > 0) {

            $("input.spinner").each(function () {
                $(this).wrap("<div class=\"spinner-wrapper\"></div>");
                $(this).after("<button class=\"spinner-button-up\"><span class=\"fa fa-angle-up\"></span></button>");
                $(this).after("<button class=\"spinner-button-down\"><span class=\"fa fa-angle-down\"></span></button>");
            });

            $(".spinner-button-up").on("click", function () {

                var input = $(this).parent(".spinner-wrapper").find("input"),
                    spinMax = input.attr("data-spinner-max") ? parseFloat(input.data("spinner-max")) : false,
                    spinMin = input.attr("data-spinner-min") ? parseFloat(input.data("spinner-min")) : false,
                    spinStep = input.attr("data-spinner-step") ? parseFloat(input.data("spinner-step")) : 1,
                    val = parseFloat(input.val()) + spinStep;

                if (typeof spinMax !== 'undefined' && spinMax !== false) {
                    if (val > spinMax) return false;
                }
                if (typeof spinMin !== 'undefined' && spinMin !== false) {
                    if (val < spinMin) return false;
                }

                input.val(val);

                return false;
            });

            $(".spinner-button-down").on("click", function () {

                var input = $(this).parent(".spinner-wrapper").find("input"),
                    spinMax = input.attr("data-spinner-max") ? parseFloat(input.data("spinner-max")) : false,
                    spinMin = input.attr("data-spinner-min") ? parseFloat(input.data("spinner-min")) : false,
                    spinStep = input.attr("data-spinner-step") ? parseFloat(input.data("spinner-step")) : 1,
                    val = parseFloat(input.val()) - spinStep;

                if (typeof spinMax !== 'undefined' && spinMax !== false) {
                    if (val > spinMax) return false;
                }
                if (typeof spinMin !== 'undefined' && spinMin !== false) {
                    if (val < spinMin) return false;
                }

                input.val(val);

                return false;
            });

        }

    },
    customScrollBar: function () {
        if ($(".scroll").length > 0)
            $(".scroll").mCustomScrollbar({ axis: "y", autoHideScrollbar: true, scrollInertia: 200, advanced: { autoScrollOnFocus: false } });
    },
    bootstrap_select: function () {
        if ($(".bs-select").length > 0)
            $(".bs-select").selectpicker({ iconBase: '', tickIcon: 'fa fa-check' });

        if ($(".selectpicker").length > 0)
            $(".selectpicker").selectpicker({ iconBase: 'fa fa-check', tickIcon: 'fa fa-check' });
    },
    select2: function () {
        if ($(".s2-select").length > 0) {
            $(".s2-select").select2({ minimumResultsForSearch: Infinity });
        }
        if ($(".s2-select-search").length > 0) {
            $(".s2-select-search").select2();
        }
        if ($(".s2-select-tags").length > 0) {
            $(".s2-select-tags").select2({ tags: true });
        }
    },
    bootstrap_daterange: function () {
        if ($(".daterange").length > 0) {
            $("input.daterange").daterangepicker({
                locale: {
                    format: 'DD/MM/YYYY'
                }
            });
        }
        if ($(".datetimerange").length > 0) {
            $('input.datetimerange').daterangepicker({
                timePicker: true,
                timePickerIncrement: 30,
                locale: {
                    format: 'MM/DD/YYYY h:mm A'
                }
            });
        }
    },
    bootstrap_datepicker: function () {

        /* in case of update datepicker 
         * icons
         *   time: "icon-clock2",
             date: "icon-calendar-full",
             up: "icon-chevron-up",
             down: "icon-chevron-down",                    
             previous: 'icon-chevron-left',
             next: 'icon-chevron-right',
             today: 'icon-calendar-insert',
             clear: 'icon-trash2',
             close: 'icon-cross'
         * 
         */
        if ($(".bs-datepicker").length > 0) {
            $(".bs-datepicker").datetimepicker({ format: "DD/MM/YYYY" });
        }

        if ($(".bs-datetimepicker").length > 0) {
            $(".bs-datetimepicker").datetimepicker();
        }
        if ($(".bs-timepicker").length > 0) {
            $(".bs-timepicker").datetimepicker({ format: "LT" });
        }

        if ($(".bs-datepicker-weekends").length > 0) {
            $(".bs-datepicker-weekends").datetimepicker({ format: "DD/MM/YYYY", daysOfWeekDisabled: [0, 6] });
        }

        if ($(".bs-datepicker-inline").length > 0) {
            $(".bs-datepicker-inline").datetimepicker({
                inline: true
            });
        }

        if ($(".bs-datepicker-inline-time").length > 0) {
            $(".bs-datepicker-inline-time").datetimepicker({
                inline: true,
                sideBySide: true
            });
        }

        if ($(".bs-datepicker-inline-years").length > 0) {
            $(".bs-datepicker-inline-years").datetimepicker({
                inline: true,
                viewMode: 'years'
            });
        }
    },
    bootstrap_popover: function () {
        $("[data-toggle='popover']").popover();

        $(".popover-hover").on("mouseenter", function () {
            $(this).popover('show');
        }).on("mouseleave", function () {
            $(this).popover('hide');
        });

        $(".modal").on("show.bs.modal", function () {
            $("[data-toggle='popover']").popover("hide");
        });
    },
    bootstrap_tooltip: function () {
        $("[data-toggle='tooltip']").tooltip();
    },
    maskedInput: function () {
        if ($("input[class^='mask_']").length > 0) {
            $("input.mask_tin").mask('99-9999999');
            $("input.mask_ssn").mask('999-99-9999');
            $("input.mask_date").mask('9999-99-99');
            $("input.mask_date_rev").mask('99-99-9999');
            $("input.mask_product").mask('a*-999-a999');
            $("input.mask_phone").mask('99 (999) 999-99-99');
            $("input.mask_phone_ext").mask('99 (999) 999-9999? x99999');
            $("input.mask_credit").mask('9999-9999-9999-9999');
            $("input.mask_percent").mask('99%');
        }
    },
    noty: function () {

        $(".notify").on("click", function () {

            noty({
                text: $(this).data("notify"),
                type: $(this).data("notify-type"),
                layout: $(this).data("notify-layout") ? $(this).data("notify-layout") : 'topRight',
                animation: {
                    open: 'animated bounceIn',
                    close: 'animated fadeOut',
                    speed: 200
                }
            });

        });

    },
    knob: function () {
        if ($(".knob").length > 0) {
            $(".knob").knob({
                'format': function (value) {
                    return value + '%';
                }
            });
        }
    },
    sparkline: function () {
        if ($(".sparkline").length > 0)
            $(".sparkline").sparkline('html', { enableTagOptions: true, disableHiddenCheck: true });
    },
    wizard: function () {

        if ($(".wizard").length > 0) {

            //check count of steps in each wizard
            $(".wizard > ul").each(function () {
                $(this).addClass("steps_" + $(this).children("li").length);
            });// ./end                                    

            // init wizard plugin
            $(".wizard").smartWizard({
                // This part (using for wizard validation) of code can be removed FROM 
                onLeaveStep: function (obj) {
                    var wizard = obj.parents(".wizard");

                    if (wizard.hasClass("wizard-validation")) {

                        var valid = true;

                        $('input,textarea', $(obj.attr("href"))).each(function (i, v) {
                            valid = validate.element(v) && valid;
                        });

                        if (!valid) {
                            wizard.find(".stepContainer").removeAttr("style");
                            validate.focusInvalid();
                            return false;
                        }
                    }

                    app.spy();

                    return true;
                },// <-- TO
                //this is important part of wizard init
                onShowStep: function (obj) {
                    var wizard = obj.parents(".wizard");

                    if (wizard.hasClass("show-submit")) {

                        var step_num = obj.attr('rel');
                        var step_max = obj.parents(".anchor").find("li").length;

                        if (step_num == step_max) {
                            obj.parents(".wizard").find(".actionBar .btn-primary").css("display", "block");
                        }
                    }

                    app.spy();

                    return true;
                }// ./end
            });
        }

    },
    multiselect: function () {
        if ($(".multiselect").length > 0) {
            $(".multiselect").multiSelect({
                afterInit: function () {
                    var self = this;
                    self.$container.addClass("row");
                    self.$container.find(".ms-selectable, .ms-selection").addClass("col-xs-6");
                }
            });
        }
    },
    bootstrap_colorpicker: function () {

        if ($(".bs-colorpicker").length > 0) {
            $(".bs-colorpicker").colorpicker({
                sliders: {
                    saturation: { maxLeft: 150, maxTop: 150 },
                    hue: { maxTop: 150 },
                    alpha: { maxTop: 150 }
                }
            });
        }
        if ($(".bs-colorpicker-lg").length > 0) {
            $(".bs-colorpicker-lg").colorpicker({
                customClass: 'colorpicker-2x',
                sliders: {
                    saturation: { maxLeft: 250, maxTop: 250 },
                    hue: { maxTop: 250 },
                    alpha: { maxTop: 250 }
                }
            });
        }


    },
    file_preview: function () {
        $('[name="file"]').on('change', function (e) {
            const [file] = e.target.files
            if (file) {
                // console.log(file)
                $('.preview-image').attr('src', URL.createObjectURL(file));
                $('.preview-image').show();
            }
        })

    },
    loaded: function () {
        app_plugins.customScrollBar();
        app_plugins.checkbox_radio();
        app_plugins.formSpinner();
        app_plugins.switch_button();
        app_plugins.bootstrap_select();
        app_plugins.select2();
        app_plugins.bootstrap_popover();
        app_plugins.bootstrap_datepicker();
        app_plugins.bootstrap_tooltip();
        app_plugins.maskedInput();
        app_plugins.knob();

        app_plugins.sparkline();

        app_plugins.isotope();

        app_plugins.noty();
        app_plugins.wizard();
        app_plugins.bootstrap_daterange();

        app_plugins.multiselect();
        app_plugins.bootstrap_colorpicker();
        app_plugins.file_preview();
    }
};

$(function () {
    app_plugins.loaded();
});

$(document).ready(function () {
    app.loaded();
});
$.extend(true, $.fn.dataTable.defaults, {
    language: {
        search: "_INPUT_",
        searchPlaceholder: 'ค้นหา..',
        emptyTable: 'ไม่มีข้อมูล',
        info: "ข้อมูลลำดับที่ _START_ ถึง _END_ จาก _TOTAL_ รายการ",
        infoEmpty: "ไม่มีข้อมูล",
        lengthMenu: "_MENU_ รายการ",
        oPaginate: {
            sFirst: '<i class="fa fa-angle-double-left"></i>',
            sPrevious: '<i class="fa fa-angle-left"></i>',
            sNext: '<i class="fa fa-angle-right"></i>',
            sLast: '<i class="fa fa-angle-double-right"></i>'
        },
        processing: '<i class="fa fa-cog fa-spin fa-fw tx-gray-400"></i> <span class="tx-16 tx-gray-400">Loading...</span> ',
    },
    dom: '<tr><"table-control"pi>',
    // "dom": '<"table-info"i>rt<"table-control"lp>',
    // "sDom"          : '<"search-box"r>lftip', // FOR MOVE SEARCH BOX TO LEFT SIDE
    responsive: false,
    bStateSave: true,
    bLengthChange: false,
    bPaginate: true,
    bInfo: true,
    bSort: false,
    bFilter: true,
    serverSide: true,
    processing: true,
    ordering: true,
    pagingType: 'full_numbers',
    pageLength: 10,
    autoWidth: false,
    lengthMenu: [
        [10, 25, 50],
        [10, 25, 50]
    ],
})

$.extend($.fn.dataTableExt.oStdClasses, {
    "sWrapper": "dataTables_wrapper",
    "sFilterInput": "form-control input-inline",
    "sLengthSelect": "form-control input-inline"
});

$.extend(true, $.fn.dataTable.defaults, {
    columnDefs: [
        { targets: '_all', orderSequence: ["desc", "asc"] }
    ],
    initComplete: function (settings, json) {
        var previous = App.getParam('previous');
        var $table = $('#' + settings.sTableId);
        var $row = $table.find('tbody > tr[id="' + previous + '"]');
        $row.addClass('hovered');

    },
    fnCreatedRow: function (nRow, aData, iDataIndex) {
        $(nRow).attr('id', aData.id);
    }
});

$.fn.dataTable.ext.errMode = 'throw';

// $('body').on('click', '.btn-view', function () {
//     Loading.show();
//     $('#pdfFrame').attr('src', moduleUrl + '/' + $(this).data('id'));
//     setTimeout(() => {
//         $('#modal-preview').modal('show');
//         setTimeout(() => {
//             Loading.hide();
//         }, 300);
//     }, 500);
// });
var Loading = function() {
    return {
        show: function () {
            $('#loading').show();
        }, 
        hide: function () {
            $('#loading').hide();
        }
    };

}();